// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go
//
// Generated by this command:
//
//	mockgen -source=./service.go -destination=./mock/service_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockRateLimiterService is a mock of RateLimiterService interface.
type MockRateLimiterService struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimiterServiceMockRecorder
}

// MockRateLimiterServiceMockRecorder is the mock recorder for MockRateLimiterService.
type MockRateLimiterServiceMockRecorder struct {
	mock *MockRateLimiterService
}

// NewMockRateLimiterService creates a new mock instance.
func NewMockRateLimiterService(ctrl *gomock.Controller) *MockRateLimiterService {
	mock := &MockRateLimiterService{ctrl: ctrl}
	mock.recorder = &MockRateLimiterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimiterService) EXPECT() *MockRateLimiterServiceMockRecorder {
	return m.recorder
}

// Allow mocks base method.
func (m *MockRateLimiterService) Allow(key string, limit int, duration time.Duration) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allow", key, limit, duration)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Allow indicates an expected call of Allow.
func (mr *MockRateLimiterServiceMockRecorder) Allow(key, limit, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allow", reflect.TypeOf((*MockRateLimiterService)(nil).Allow), key, limit, duration)
}
