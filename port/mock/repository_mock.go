// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go
//
// Generated by this command:
//
//	mockgen -source=./repository.go -destination=./mock/repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockRateLimiterRepository is a mock of RateLimiterRepository interface.
type MockRateLimiterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimiterRepositoryMockRecorder
}

// MockRateLimiterRepositoryMockRecorder is the mock recorder for MockRateLimiterRepository.
type MockRateLimiterRepositoryMockRecorder struct {
	mock *MockRateLimiterRepository
}

// NewMockRateLimiterRepository creates a new mock instance.
func NewMockRateLimiterRepository(ctrl *gomock.Controller) *MockRateLimiterRepository {
	mock := &MockRateLimiterRepository{ctrl: ctrl}
	mock.recorder = &MockRateLimiterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimiterRepository) EXPECT() *MockRateLimiterRepositoryMockRecorder {
	return m.recorder
}

// Allow mocks base method.
func (m *MockRateLimiterRepository) Allow(key string, limit int, duration time.Duration) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allow", key, limit, duration)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Allow indicates an expected call of Allow.
func (mr *MockRateLimiterRepositoryMockRecorder) Allow(key, limit, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allow", reflect.TypeOf((*MockRateLimiterRepository)(nil).Allow), key, limit, duration)
}
